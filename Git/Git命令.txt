2016-08-11
1) git init
  通过git init命令把一个目录变成Git可以管理的仓库，同时这个命令会创建.git目录。
  这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。
2) git add <file>
  使用命令git add <file>可以将文件添加到仓库，注意，可反复多次使用，添加多个文件。
3) git commit -m ""
  提交前面的所有修改。-m参数为本次提交的备注。
4) git status
  查看当前仓库的状态。
5）git diff <file>
  查看文件的变化。以Unix通用的diff格式显示。直接的diff加文件，表示对比工作区和暂存区的difference。如果要对比暂存区和分支的diffence使用 $git diff HEAD -- <file>
6) git log
  显示从最近到最远的提交日志。如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数。这样只显示提交版本和备注。
7) git reset --hard HEAD^
  回退到上一个版本。在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
  注意，回退到上一个版本后，该版本之后的版本使用git log将不会再显示出来。如果想再回到未来版本，就只有知道未来版本的版本号，使用 8)回到未来。
8) git reset --hard <commit_id>
  直接回到commit_id对应的版本。Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你重新指定版本时，Git仅仅是把HEAD从指向你指定的版本。然后更新工作区的文件。
9) git reflog
  记录你的每一次命令，是Git中的后悔药。
10) 撤销修改:
  10.1)git checkout -- <file>
    撤销工作区的修改。这里有两种情况：一是文件自修改以来还没有add到暂存区，这时文件回到和版本库一模一样的状态。二是文件已经add到暂存区了又作了修改，这时文件撤销到和暂存区一样的状态。
  10.2)git reset HEAD <file>
    将已经添加到暂存区的文件撤回到工作区，相当于没有执行git add操作。

2016-08-12
11)git rm <file>
  用git的方式删除工作区文件。如果确认要删除该文件使用git commit提交到到版本库，文件就真的从版本库中删除了。如果后悔了可以使用git checkout -- <file>将文件从版本库中恢复。
  git checkout 可以说是git中的“一键还原”。
12)git remote add origin git@github.com:username/repository.git
  将本地版本库和远程版本库进行关联，其中username为git用户名，repository为仓库名称。
13)git push -u origin <name>
  git push是将本地仓库中的内容推送到远程仓库。初始情况下远程仓库是空的，所有需要使用-u参数将本地name分支和远程name分支进行关联。关联以后的推送命令就直接使用git push origin <name>.
14)git branch <name>
  创建name分支。
15)git checkout <name>
  切换到name分支。
16)git checkout -b <name> 创建并切换到name分支。
17)git branch 查看当前所以分支，带*的表示当前工作空间所在分支。
18)git merge <name>
  将name分支合并到当前分支。默认使用Fast forward快速合并方式进行合并，也就是直接把当前分支指向当前name的提交。只是指针的修改，所以速度非常快。
19）git branch -d <name>
  删除本地仓库的name分支。
